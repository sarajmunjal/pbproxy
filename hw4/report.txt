# Homework 4: CSE 508, Fall 2017


## Dnsinject

### Description
A tool for DNS cache poisoning using packet injection

### Installing dependencies(Ubuntu)
pip install scapy
pip install netifaces


### Arguments supported
1. [-h] (optional): optional file containing IP and host mapping: if an packet is from IP X and queries for host Y, then poison it
2. [-i] (optional): network interface for listening
3. expression (compulsory): BPF filter to apply while listening

####Example:
1. sudo python dnsinject.py -h hosts.txt 'udp dst port 53' (spoof all DNS packets)

Sample from n.pcap file (included)
05:15:14.259135 IP resolver1.opendns.com.domain > 192.168.43.209.52829: 31195 2/0/0 CNAME p28-btmmdns.icloud.com.akadns.net., A 17.110.240.12 (103)
----- DNS request for Facebook.com ------
05:15:22.708474 IP 192.168.43.209.51169 > resolver1.opendns.com.domain: 38675+ [1au] A? facebook.com. (41)
----- Local dnsinject machine sends packet first (102.168.43.65) ------
05:15:22.713824 IP resolver1.opendns.com.domain > 192.168.43.209.51169: 38675- [0q] 1/0/0 A 192.168.43.65 (40)
----- Response from OpenDNS arrives later (102.168.43.65) ------
05:15:22.778838 IP resolver1.opendns.com.domain > 192.168.43.209.51169: 38675 1/0/1 A 157.240.2.35 (57)
05:15:23.002552 IP 192.168.43.209.65008 > resolver1.opendns.com.domain: 32696+ A? gateway.icloud.com. (36)

Estimated latency: ~= 10 ms for injection, on current setup with VMWare Fusion in bridged configuration

---------------------------------------------------------------------------------------------------------------------------------------------------------

## Dnsdetect

### Description
A tool for detecting and warning against possible DNS cache poisoning attacks

### Installing dependencies(Ubuntu)
pip install scapy
pip install netifaces


### Arguments supported
1. [-r] (optional): pcap file for offline reading of packets instead of listening live
2. [-i] (optional): network interface for listening
3. expression (compulsory): BPF filter to apply while listening

####Example:
1. sudo python dnsdetect.py -i ens33 'udp src port 53'

#### Logic for identifying false positives:
If two DNS responses have different IP addresses but their TTL is the same, it is highly probable that they are from the correct
DNS server. It is quite tough(improbable) for an attacker to guess TTL correctly


### Student details
* Name: Saraj Munjal
* NetID: smunjal
* ID #: 111497962

### References
[1] Multiple posts on [www.stackoverflow.com](https://www.stackoverflow.com)
[2] Scapy tutorial [https://thepacketgeek.com/scapy-p-09-scapy-and-dns/](https://thepacketgeek.com/scapy-p-09-scapy-and-dns/)
[3] DNS protocol details from Wikipedia [https://en.wikipedia.org/wiki/List_of_DNS_record_types] (https://en.wikipedia.org/wiki/List_of_DNS_record_types/)